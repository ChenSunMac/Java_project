package test;

/*
 * Reverse String test
 * 1. String Builder .reverse(), .toString() -> return a string;
 * 		O(n) time and space
 * 2. transform the string to a list of characters and swap values;
 * 		O(n) time and space
 * 
 * 3. Given an array of non-negative integers, you are initially positioned at the first index of the array.
 * Each element in the array represents your maximum jump length at that position.
 * Determine if you are able to reach the last index.
 * A = [2,3,1,1,4], return true.
 * A = [3,2,1,0,4], return false.
 * Use greedy algorithm, for each element in the array, solve the maximum current jump
 * until iterate over the list
 */

public class Junit_test {
	
	public static void main(String[] args) { 
		String test = "abcdfef";
		System.out.println(reverseString2(test));
		System.out.println(reverseString1(test));
	}
	
	public String concatenate(String s1, String s2){
		return s1 + s2;
	}
	
	public int multiply (int num1, int num2){
		return num1 * num2;
	}
	
	
	    public static String reverseString1(String s) {
	        return new StringBuilder(s).reverse().toString();
	    }
	    
	    public static String reverseString2(String s) {
	        char[] word = s.toCharArray();
	        int i = 0;
	        int j = s.length() - 1;
	        while (i < j) {
	            char temp = word[i];
	            word[i] = word[j];
	            word[j] = temp;
	            i++;
	            j--;
	        }
	        return new String(word);
	    }
	    // can jump use greedy algorithm
	    public static boolean canJump(int[] A) {
	        int max = 0;
	        for(int i=0;i<A.length;i++){
	            if(i>max) {return false;}
	            max = Math.max(A[i]+i,max);
	        }
	        return true;
	    }
}
